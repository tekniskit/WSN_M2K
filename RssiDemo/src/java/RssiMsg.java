/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'RssiMsg'
 * message type.
 */

public class RssiMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 112;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 112;

    /** Create a new RssiMsg of size 112. */
    public RssiMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new RssiMsg of the given data_length. */
    public RssiMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg with the given data_length
     * and base offset.
     */
    public RssiMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg using the given byte array
     * as backing store.
     */
    public RssiMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public RssiMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public RssiMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg embedded in the given message
     * at the given base offset.
     */
    public RssiMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg embedded in the given message
     * at the given base offset and length.
     */
    public RssiMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <RssiMsg> \n";
      try {
        s += "  [rssi=0x"+Long.toHexString(get_rssi())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lqi=0x"+Long.toHexString(get_lqi())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [channel=0x"+Long.toHexString(get_channel())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [power=0x"+Long.toHexString(get_power())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill1=0x"+Long.toHexString(get_fill1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill2=0x"+Long.toHexString(get_fill2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill3=0x"+Long.toHexString(get_fill3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill4=0x"+Long.toHexString(get_fill4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill5=0x"+Long.toHexString(get_fill5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill6=0x"+Long.toHexString(get_fill6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill7=0x"+Long.toHexString(get_fill7())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill8=0x"+Long.toHexString(get_fill8())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill9=0x"+Long.toHexString(get_fill9())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill10=0x"+Long.toHexString(get_fill10())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill11=0x"+Long.toHexString(get_fill11())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill12=0x"+Long.toHexString(get_fill12())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill13=0x"+Long.toHexString(get_fill13())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fill14=0x"+Long.toHexString(get_fill14())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssi
    //   Field type: short, signed
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssi' is signed (true).
     */
    public static boolean isSigned_rssi() {
        return true;
    }

    /**
     * Return whether the field 'rssi' is an array (false).
     */
    public static boolean isArray_rssi() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssi'
     */
    public static int offset_rssi() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssi'
     */
    public static int offsetBits_rssi() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'rssi'
     */
    public short get_rssi() {
        return (short)getSIntBEElement(offsetBits_rssi(), 16);
    }

    /**
     * Set the value of the field 'rssi'
     */
    public void set_rssi(short value) {
        setSIntBEElement(offsetBits_rssi(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssi'
     */
    public static int size_rssi() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssi'
     */
    public static int sizeBits_rssi() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lqi
    //   Field type: short, signed
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lqi' is signed (true).
     */
    public static boolean isSigned_lqi() {
        return true;
    }

    /**
     * Return whether the field 'lqi' is an array (false).
     */
    public static boolean isArray_lqi() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lqi'
     */
    public static int offset_lqi() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lqi'
     */
    public static int offsetBits_lqi() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'lqi'
     */
    public short get_lqi() {
        return (short)getSIntBEElement(offsetBits_lqi(), 16);
    }

    /**
     * Set the value of the field 'lqi'
     */
    public void set_lqi(short value) {
        setSIntBEElement(offsetBits_lqi(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'lqi'
     */
    public static int size_lqi() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lqi'
     */
    public static int sizeBits_lqi() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: channel
    //   Field type: short, signed
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'channel' is signed (true).
     */
    public static boolean isSigned_channel() {
        return true;
    }

    /**
     * Return whether the field 'channel' is an array (false).
     */
    public static boolean isArray_channel() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'channel'
     */
    public static int offset_channel() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'channel'
     */
    public static int offsetBits_channel() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'channel'
     */
    public short get_channel() {
        return (short)getSIntBEElement(offsetBits_channel(), 16);
    }

    /**
     * Set the value of the field 'channel'
     */
    public void set_channel(short value) {
        setSIntBEElement(offsetBits_channel(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'channel'
     */
    public static int size_channel() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'channel'
     */
    public static int sizeBits_channel() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: power
    //   Field type: short, signed
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'power' is signed (true).
     */
    public static boolean isSigned_power() {
        return true;
    }

    /**
     * Return whether the field 'power' is an array (false).
     */
    public static boolean isArray_power() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'power'
     */
    public static int offset_power() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'power'
     */
    public static int offsetBits_power() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'power'
     */
    public short get_power() {
        return (short)getSIntBEElement(offsetBits_power(), 16);
    }

    /**
     * Set the value of the field 'power'
     */
    public void set_power(short value) {
        setSIntBEElement(offsetBits_power(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'power'
     */
    public static int size_power() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'power'
     */
    public static int sizeBits_power() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: short, signed
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (true).
     */
    public static boolean isSigned_counter() {
        return true;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'counter'
     */
    public short get_counter() {
        return (short)getSIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(short value) {
        setSIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill1
    //   Field type: long, signed
    //   Offset (bits): 80
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill1' is signed (true).
     */
    public static boolean isSigned_fill1() {
        return true;
    }

    /**
     * Return whether the field 'fill1' is an array (false).
     */
    public static boolean isArray_fill1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill1'
     */
    public static int offset_fill1() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill1'
     */
    public static int offsetBits_fill1() {
        return 80;
    }

    /**
     * Return the value (as a long) of the field 'fill1'
     */
    public long get_fill1() {
        return (long)getSIntBEElement(offsetBits_fill1(), 64);
    }

    /**
     * Set the value of the field 'fill1'
     */
    public void set_fill1(long value) {
        setSIntBEElement(offsetBits_fill1(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill1'
     */
    public static int size_fill1() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill1'
     */
    public static int sizeBits_fill1() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill2
    //   Field type: long, signed
    //   Offset (bits): 144
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill2' is signed (true).
     */
    public static boolean isSigned_fill2() {
        return true;
    }

    /**
     * Return whether the field 'fill2' is an array (false).
     */
    public static boolean isArray_fill2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill2'
     */
    public static int offset_fill2() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill2'
     */
    public static int offsetBits_fill2() {
        return 144;
    }

    /**
     * Return the value (as a long) of the field 'fill2'
     */
    public long get_fill2() {
        return (long)getSIntBEElement(offsetBits_fill2(), 64);
    }

    /**
     * Set the value of the field 'fill2'
     */
    public void set_fill2(long value) {
        setSIntBEElement(offsetBits_fill2(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill2'
     */
    public static int size_fill2() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill2'
     */
    public static int sizeBits_fill2() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill3
    //   Field type: long, signed
    //   Offset (bits): 208
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill3' is signed (true).
     */
    public static boolean isSigned_fill3() {
        return true;
    }

    /**
     * Return whether the field 'fill3' is an array (false).
     */
    public static boolean isArray_fill3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill3'
     */
    public static int offset_fill3() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill3'
     */
    public static int offsetBits_fill3() {
        return 208;
    }

    /**
     * Return the value (as a long) of the field 'fill3'
     */
    public long get_fill3() {
        return (long)getSIntBEElement(offsetBits_fill3(), 64);
    }

    /**
     * Set the value of the field 'fill3'
     */
    public void set_fill3(long value) {
        setSIntBEElement(offsetBits_fill3(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill3'
     */
    public static int size_fill3() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill3'
     */
    public static int sizeBits_fill3() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill4
    //   Field type: long, signed
    //   Offset (bits): 272
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill4' is signed (true).
     */
    public static boolean isSigned_fill4() {
        return true;
    }

    /**
     * Return whether the field 'fill4' is an array (false).
     */
    public static boolean isArray_fill4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill4'
     */
    public static int offset_fill4() {
        return (272 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill4'
     */
    public static int offsetBits_fill4() {
        return 272;
    }

    /**
     * Return the value (as a long) of the field 'fill4'
     */
    public long get_fill4() {
        return (long)getSIntBEElement(offsetBits_fill4(), 64);
    }

    /**
     * Set the value of the field 'fill4'
     */
    public void set_fill4(long value) {
        setSIntBEElement(offsetBits_fill4(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill4'
     */
    public static int size_fill4() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill4'
     */
    public static int sizeBits_fill4() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill5
    //   Field type: long, signed
    //   Offset (bits): 336
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill5' is signed (true).
     */
    public static boolean isSigned_fill5() {
        return true;
    }

    /**
     * Return whether the field 'fill5' is an array (false).
     */
    public static boolean isArray_fill5() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill5'
     */
    public static int offset_fill5() {
        return (336 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill5'
     */
    public static int offsetBits_fill5() {
        return 336;
    }

    /**
     * Return the value (as a long) of the field 'fill5'
     */
    public long get_fill5() {
        return (long)getSIntBEElement(offsetBits_fill5(), 64);
    }

    /**
     * Set the value of the field 'fill5'
     */
    public void set_fill5(long value) {
        setSIntBEElement(offsetBits_fill5(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill5'
     */
    public static int size_fill5() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill5'
     */
    public static int sizeBits_fill5() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill6
    //   Field type: long, signed
    //   Offset (bits): 400
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill6' is signed (true).
     */
    public static boolean isSigned_fill6() {
        return true;
    }

    /**
     * Return whether the field 'fill6' is an array (false).
     */
    public static boolean isArray_fill6() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill6'
     */
    public static int offset_fill6() {
        return (400 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill6'
     */
    public static int offsetBits_fill6() {
        return 400;
    }

    /**
     * Return the value (as a long) of the field 'fill6'
     */
    public long get_fill6() {
        return (long)getSIntBEElement(offsetBits_fill6(), 64);
    }

    /**
     * Set the value of the field 'fill6'
     */
    public void set_fill6(long value) {
        setSIntBEElement(offsetBits_fill6(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill6'
     */
    public static int size_fill6() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill6'
     */
    public static int sizeBits_fill6() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill7
    //   Field type: long, signed
    //   Offset (bits): 464
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill7' is signed (true).
     */
    public static boolean isSigned_fill7() {
        return true;
    }

    /**
     * Return whether the field 'fill7' is an array (false).
     */
    public static boolean isArray_fill7() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill7'
     */
    public static int offset_fill7() {
        return (464 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill7'
     */
    public static int offsetBits_fill7() {
        return 464;
    }

    /**
     * Return the value (as a long) of the field 'fill7'
     */
    public long get_fill7() {
        return (long)getSIntBEElement(offsetBits_fill7(), 64);
    }

    /**
     * Set the value of the field 'fill7'
     */
    public void set_fill7(long value) {
        setSIntBEElement(offsetBits_fill7(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill7'
     */
    public static int size_fill7() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill7'
     */
    public static int sizeBits_fill7() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill8
    //   Field type: long, signed
    //   Offset (bits): 528
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill8' is signed (true).
     */
    public static boolean isSigned_fill8() {
        return true;
    }

    /**
     * Return whether the field 'fill8' is an array (false).
     */
    public static boolean isArray_fill8() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill8'
     */
    public static int offset_fill8() {
        return (528 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill8'
     */
    public static int offsetBits_fill8() {
        return 528;
    }

    /**
     * Return the value (as a long) of the field 'fill8'
     */
    public long get_fill8() {
        return (long)getSIntBEElement(offsetBits_fill8(), 64);
    }

    /**
     * Set the value of the field 'fill8'
     */
    public void set_fill8(long value) {
        setSIntBEElement(offsetBits_fill8(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill8'
     */
    public static int size_fill8() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill8'
     */
    public static int sizeBits_fill8() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill9
    //   Field type: long, signed
    //   Offset (bits): 592
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill9' is signed (true).
     */
    public static boolean isSigned_fill9() {
        return true;
    }

    /**
     * Return whether the field 'fill9' is an array (false).
     */
    public static boolean isArray_fill9() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill9'
     */
    public static int offset_fill9() {
        return (592 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill9'
     */
    public static int offsetBits_fill9() {
        return 592;
    }

    /**
     * Return the value (as a long) of the field 'fill9'
     */
    public long get_fill9() {
        return (long)getSIntBEElement(offsetBits_fill9(), 64);
    }

    /**
     * Set the value of the field 'fill9'
     */
    public void set_fill9(long value) {
        setSIntBEElement(offsetBits_fill9(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill9'
     */
    public static int size_fill9() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill9'
     */
    public static int sizeBits_fill9() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill10
    //   Field type: long, signed
    //   Offset (bits): 656
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill10' is signed (true).
     */
    public static boolean isSigned_fill10() {
        return true;
    }

    /**
     * Return whether the field 'fill10' is an array (false).
     */
    public static boolean isArray_fill10() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill10'
     */
    public static int offset_fill10() {
        return (656 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill10'
     */
    public static int offsetBits_fill10() {
        return 656;
    }

    /**
     * Return the value (as a long) of the field 'fill10'
     */
    public long get_fill10() {
        return (long)getSIntBEElement(offsetBits_fill10(), 64);
    }

    /**
     * Set the value of the field 'fill10'
     */
    public void set_fill10(long value) {
        setSIntBEElement(offsetBits_fill10(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill10'
     */
    public static int size_fill10() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill10'
     */
    public static int sizeBits_fill10() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill11
    //   Field type: long, signed
    //   Offset (bits): 720
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill11' is signed (true).
     */
    public static boolean isSigned_fill11() {
        return true;
    }

    /**
     * Return whether the field 'fill11' is an array (false).
     */
    public static boolean isArray_fill11() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill11'
     */
    public static int offset_fill11() {
        return (720 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill11'
     */
    public static int offsetBits_fill11() {
        return 720;
    }

    /**
     * Return the value (as a long) of the field 'fill11'
     */
    public long get_fill11() {
        return (long)getSIntBEElement(offsetBits_fill11(), 64);
    }

    /**
     * Set the value of the field 'fill11'
     */
    public void set_fill11(long value) {
        setSIntBEElement(offsetBits_fill11(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill11'
     */
    public static int size_fill11() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill11'
     */
    public static int sizeBits_fill11() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill12
    //   Field type: long, signed
    //   Offset (bits): 784
    //   Size (bits): 64
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill12' is signed (true).
     */
    public static boolean isSigned_fill12() {
        return true;
    }

    /**
     * Return whether the field 'fill12' is an array (false).
     */
    public static boolean isArray_fill12() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill12'
     */
    public static int offset_fill12() {
        return (784 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill12'
     */
    public static int offsetBits_fill12() {
        return 784;
    }

    /**
     * Return the value (as a long) of the field 'fill12'
     */
    public long get_fill12() {
        return (long)getSIntBEElement(offsetBits_fill12(), 64);
    }

    /**
     * Set the value of the field 'fill12'
     */
    public void set_fill12(long value) {
        setSIntBEElement(offsetBits_fill12(), 64, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill12'
     */
    public static int size_fill12() {
        return (64 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill12'
     */
    public static int sizeBits_fill12() {
        return 64;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill13
    //   Field type: int, signed
    //   Offset (bits): 848
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill13' is signed (true).
     */
    public static boolean isSigned_fill13() {
        return true;
    }

    /**
     * Return whether the field 'fill13' is an array (false).
     */
    public static boolean isArray_fill13() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill13'
     */
    public static int offset_fill13() {
        return (848 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill13'
     */
    public static int offsetBits_fill13() {
        return 848;
    }

    /**
     * Return the value (as a int) of the field 'fill13'
     */
    public int get_fill13() {
        return (int)getSIntBEElement(offsetBits_fill13(), 32);
    }

    /**
     * Set the value of the field 'fill13'
     */
    public void set_fill13(int value) {
        setSIntBEElement(offsetBits_fill13(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill13'
     */
    public static int size_fill13() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill13'
     */
    public static int sizeBits_fill13() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fill14
    //   Field type: short, signed
    //   Offset (bits): 880
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fill14' is signed (true).
     */
    public static boolean isSigned_fill14() {
        return true;
    }

    /**
     * Return whether the field 'fill14' is an array (false).
     */
    public static boolean isArray_fill14() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fill14'
     */
    public static int offset_fill14() {
        return (880 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fill14'
     */
    public static int offsetBits_fill14() {
        return 880;
    }

    /**
     * Return the value (as a short) of the field 'fill14'
     */
    public short get_fill14() {
        return (short)getSIntBEElement(offsetBits_fill14(), 16);
    }

    /**
     * Set the value of the field 'fill14'
     */
    public void set_fill14(short value) {
        setSIntBEElement(offsetBits_fill14(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'fill14'
     */
    public static int size_fill14() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fill14'
     */
    public static int sizeBits_fill14() {
        return 16;
    }

}
